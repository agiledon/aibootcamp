from mcp.server.fastmcp import FastMCP
import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import io
import base64

# create FastMCP instance
mcp = FastMCP("financial-analyst")

@mcp.tool()
def analyze_stock(query: str) -> str:
    """
    Analyzes stock market data based on the query and generates executable Python code for analysis and visualization.
    Returns a formatted Python script ready for execution.
    
    The query is a string that must contain the stock symbol (e.g., TSLA, AAPL, NVDA, etc.), 
    timeframe (e.g., 1d, 1mo, 1y), and action to perform (e.g., plot, analyze, compare).

    Example queries:
    - "Show me Tesla's stock performance over the last 3 months"
    - "Compare Apple and Microsoft stocks for the past year"
    - "Analyze the trading volume of Amazon stock for the last month"

    Args:
        query (str): The query to analyze the stock market data.
    
    Returns:
        str: A nicely formatted python code as a string.
    """
    try:
        # 简单的查询解析
        query_lower = query.lower()
        
        # 提取股票符号
        if 'tesla' in query_lower or 'tsla' in query_lower:
            symbol = 'TSLA'
        elif 'apple' in query_lower or 'aapl' in query_lower:
            symbol = 'AAPL'
        elif 'microsoft' in query_lower or 'msft' in query_lower:
            symbol = 'MSFT'
        elif 'amazon' in query_lower or 'amzn' in query_lower:
            symbol = 'AMZN'
        elif 'nvidia' in query_lower or 'nvda' in query_lower:
            symbol = 'NVDA'
        else:
            symbol = 'TSLA'  # 默认使用Tesla
        
        # 提取时间范围
        if '3 months' in query_lower or '3mo' in query_lower:
            period = '3mo'
        elif '1 month' in query_lower or '1mo' in query_lower:
            period = '1mo'
        elif '6 months' in query_lower or '6mo' in query_lower:
            period = '6mo'
        elif '1 year' in query_lower or '1y' in query_lower:
            period = '1y'
        elif 'ytd' in query_lower:
            period = 'ytd'
        else:
            period = '3mo'  # 默认3个月
        
        # 生成Python代码
        code = f'''#!/usr/bin/env python3
"""
Stock Analysis for {symbol} - {period}
Generated by Financial Analyst MCP
"""

import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# 设置中文字体支持
plt.rcParams['font.sans-serif'] = ['Arial Unicode MS', 'SimHei', 'DejaVu Sans']
plt.rcParams['axes.unicode_minus'] = False

def analyze_stock_performance(symbol='{symbol}', period='{period}'):
    """分析股票表现"""
    print(f"正在获取 {{symbol}} 的股票数据 ({{period}})...")
    
    # 获取股票数据
    stock = yf.Ticker(symbol)
    hist = stock.history(period=period)
    
    if hist.empty:
        print(f"无法获取 {{symbol}} 的数据")
        return
    
    # 基本信息
    print(f"\\n=== {{symbol}} 股票分析报告 ===")
    print(f"分析期间: {{period}}")
    print(f"数据点数量: {{len(hist)}}")
    print(f"开始日期: {{hist.index[0].strftime('%Y-%m-%d')}}")
    print(f"结束日期: {{hist.index[-1].strftime('%Y-%m-%d')}}")
    
    # 价格统计
    current_price = hist['Close'].iloc[-1]
    start_price = hist['Close'].iloc[0]
    price_change = current_price - start_price
    price_change_pct = (price_change / start_price) * 100
    
    print(f"\\n=== 价格表现 ===")
    print(f"起始价格: ${{start_price:.2f}}")
    print(f"当前价格: ${{current_price:.2f}}")
    print(f"价格变化: ${{price_change:.2f}} ({{price_change_pct:+.2f}}%)")
    
    # 交易量统计
    avg_volume = hist['Volume'].mean()
    max_volume = hist['Volume'].max()
    min_volume = hist['Volume'].min()
    
    print(f"\\n=== 交易量统计 ===")
    print(f"平均交易量: {{avg_volume:,.0f}}")
    print(f"最大交易量: {{max_volume:,.0f}}")
    print(f"最小交易量: {{min_volume:,.0f}}")
    
    # 波动性分析
    daily_returns = hist['Close'].pct_change().dropna()
    volatility = daily_returns.std() * (252 ** 0.5)  # 年化波动率
    
    print(f"\\n=== 波动性分析 ===")
    print(f"日收益率标准差: {{daily_returns.std():.4f}}")
    print(f"年化波动率: {{volatility:.2%}}")
    
    # 创建可视化图表
    fig, axes = plt.subplots(2, 2, figsize=(15, 12))
    fig.suptitle(f'{{symbol}} 股票分析 - {{period}}', fontsize=16, fontweight='bold')
    
    # 1. 价格走势图
    axes[0, 0].plot(hist.index, hist['Close'], linewidth=2, color='#1f77b4')
    axes[0, 0].set_title('股票价格走势', fontweight='bold')
    axes[0, 0].set_ylabel('价格 ($)')
    axes[0, 0].grid(True, alpha=0.3)
    
    # 2. 交易量图
    axes[0, 1].bar(hist.index, hist['Volume'], alpha=0.7, color='#ff7f0e')
    axes[0, 1].set_title('交易量', fontweight='bold')
    axes[0, 1].set_ylabel('交易量')
    axes[0, 1].grid(True, alpha=0.3)
    
    # 3. 日收益率分布
    axes[1, 0].hist(daily_returns, bins=30, alpha=0.7, color='#2ca02c', edgecolor='black')
    axes[1, 0].set_title('日收益率分布', fontweight='bold')
    axes[1, 0].set_xlabel('日收益率')
    axes[1, 0].set_ylabel('频次')
    axes[1, 0].grid(True, alpha=0.3)
    
    # 4. 价格变化百分比
    price_pct_change = ((hist['Close'] - start_price) / start_price) * 100
    axes[1, 1].plot(hist.index, price_pct_change, linewidth=2, color='#d62728')
    axes[1, 1].set_title('累计价格变化 (%)', fontweight='bold')
    axes[1, 1].set_ylabel('变化百分比 (%)')
    axes[1, 1].grid(True, alpha=0.3)
    axes[1, 1].axhline(y=0, color='black', linestyle='--', alpha=0.5)
    
    plt.tight_layout()
    plt.show()
    
    # 返回关键指标
    return {{
        'symbol': symbol,
        'period': period,
        'current_price': current_price,
        'price_change': price_change,
        'price_change_pct': price_change_pct,
        'volatility': volatility,
        'avg_volume': avg_volume
    }}

if __name__ == "__main__":
    # 执行分析
    result = analyze_stock_performance('{symbol}', '{period}')
    print(f"\\n分析完成！")
'''
        
        return code
    except Exception as e:
        return f"Error: {e}"

@mcp.tool()
def save_code(code: str) -> str:
    """
    Expects a nicely formatted, working and executable python code as input in form of a string. 
    Save the given code to a file stock_analysis.py, make sure the code is a valid python file, nicely formatted and ready to execute.

    Args:
        code (str): The nicely formatted, working and executable python code as string.
    
    Returns:
        str: A message indicating the code was saved successfully.
    """
    try:
        with open('stock_analysis.py', 'w', encoding='utf-8') as f:
            f.write(code)
        return "Code saved to stock_analysis.py"
    except Exception as e:
        return f"Error: {e}"

@mcp.tool()
def run_code_and_show_plot() -> str:
    """
    Run the code in stock_analysis.py and generate the plot
    """
    try:
        with open('stock_analysis.py', 'r', encoding='utf-8') as f:
            code = f.read()
        exec(code)
        return "Code executed successfully and plot generated!"
    except Exception as e:
        return f"Error executing code: {e}"

# Run the server locally
if __name__ == "__main__":
    mcp.run(transport='stdio') 