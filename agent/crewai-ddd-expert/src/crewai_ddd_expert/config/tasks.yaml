domain_modeling_task:
  description: >
    根据给定的业务需求{requirement}，使用领域驱动设计(DDD)进行领域建模，并生成领域模型文档。
    1. 分析给定的业务需求，遵循统一语言，识别业务概念，对应为领域类。
    2. 根据业务规则、业务流程与业务约束，丰富领域类的属性和方法。
    3. 根据业务规则、业务流程与业务约束，确定领域类之间的关系，关系包括关联、聚合、组合、泛化、实现等。
    5. 根据DDD中相关模式的定义，明确各个领域类对应聚合中的聚合根实体、非根实体和值对象。
    6. 使用PlantUML语言创建UML类图，并生成领域模型文档。

    确保领域模型文档的结构清晰，内容完整，符合DDD的规范。
  expected_output: >
    生成markdown格式的领域模型文档，内容包括：
    1. 各个领域类的定义与说明
    2. PlantUML语法创建的UML类图
    3. 在PlantUML语法中，聚合根实体为粉红色、非根实体为蓝色、值对象为绿色。
    4. 领域模型文档中，需要包含业务概念的详细说明、类之间的依赖关系、业务概念的约束关系等。
  agent: domain_expert
  output_file: output/domain_model.md

code_generation_task:
  description: >
    根据领域专家编写的领域模型文档，使用领域驱动设计方法，编写Java代码实现领域模型。
    1. 为聚合根实体、实体与值对象定义抽象类：聚合根实体的抽象类为AggregateRoot，实体的抽象类为Entity，值对象的抽象类为ValueObject。
    2. 将领域模型文档中的类图转换为Java代码，并按照各个类在聚合中的不同角色，继承对应的抽象类
  expected_output: >
    生成Java代码，并按照各个类在聚合中的不同角色，继承对应的抽象类：
    1. 每个类都定义一个类名，类名使用驼峰命名法。
    2. 每个类都定义一个包名，包名使用小写字母。
    3. 每个类都定义一个类注释，类注释使用Markdown格式。
    4. 每个类对应一个java文件。
  agent: developer
  context:
    - domain_modeling_task
  output_file: output/domain_model_java.md

unit_test_task:
  description: >
    为Java开发工程师开发的领域层代码编写单元测试，并执行测试：
    1. 编写的单元测试需要覆盖被测类的各个业务分支
    2. 如果被测类访问了如数据库之类的外部资源，需要使用Mock的方式进行测试
    3. 需要使用JUnit5框架，并使用Mockito框架进行Mock
    4. 需要使用AssertJ框架进行断言
    5. 需要使用Lombok框架进行简化代码
  expected_output: >
    生成单元测试代码，并执行测试，测试结果为通过。
    1. 每个测试类都定义一个类名，类名使用驼峰命名法。
    2. 测试类的类名为：被测类类名+Test后缀。
    3. 每个测试类都定义一个类注释，类注释使用Markdown格式。
    4. 每个测试类对应一个java文件。
    5. 测试方法名使用蛇形命名法,形如should_return_expected_result_when_given_input
    6. 测试方法体遵循Given-When-Then模式
  agent: tester
  context:
    - code_generation_task
  output_file: output/domain_model_java_test.md
